BiocManager::install(toInstall)
install.packages("rmarkdown")
install.packages("monocle")
BiocManager::install("monocle")
# otra opcion para esto es hacer un grepl():
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
library(Seurat)
library(ggplot2)
library(ggExtra)
library(dplyr)
library(data.table)
library(grid)
library(RColorBrewer)
library(monocle)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "/home/guille/Desktop/Omics/scRNA_seq/Day2/data/filtered_gene_bc_matrices/hg19")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# otra opcion para esto es hacer un grepl():
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
pbmc <- ScaleData(pbmc)
# pbmc <- ScaleData(pbmc, features = rownames(pbmc))
# pbmc <- ScaleData(pbmc, vars.to.regress = "percent.mt")
pbmc <- NormalizeData(pbmc)
head(pbmc@assays$RNA@counts)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
pbmc <- ScaleData(pbmc)
# pbmc <- ScaleData(pbmc, features = rownames(pbmc))
# pbmc <- ScaleData(pbmc, vars.to.regress = "percent.mt")
pbmc <- NormalizeData(pbmc)
head(pbmc@assays$RNA@counts) # no me he enterado de esto luego lo ha vuelto a borrar
# este valor puede cambiar, elisabetta lo puso como el numero de cells filtradas
# primero sacamos las variable features y luego las escalamos, al contrario que
# en la teoría por ganar tiempo y espacio.
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
pbmc <- ScaleData(pbmc)
# pbmc <- ScaleData(pbmc, features = rownames(pbmc))
# pbmc <- ScaleData(pbmc, vars.to.regress = "percent.mt")
# pbmc <- ScaleData(pbmc, vars.to.regress = "Plate")
## podemos corregir por todos los genes si queremos hacer heatmaps y cosas
## graficas pero en principio escalamos solo a los 2000 genes mas variables.
## también puedo usar "Plate" como vars.to.regress si uso varias placas.
library(Seurat)
library(ggplot2)
library(ggExtra)
library(dplyr)
library(data.table)
library(grid)
library(RColorBrewer)
library(monocle)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "/home/guille/Desktop/Omics/scRNA_seq/Day2/data/filtered_gene_bc_matrices/hg19")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# otra opcion para esto es hacer un grepl():
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc)
head(pbmc@assays$RNA@counts) # no me he enterado de esto luego lo ha vuelto a borrar
# este valor puede cambiar, elisabetta lo puso como el numero de cells filtradas
# primero sacamos las variable features y luego las escalamos, al contrario que
# en la teoría por ganar tiempo y espacio.
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
pbmc <- ScaleData(pbmc)
# pbmc <- ScaleData(pbmc, features = rownames(pbmc))
# pbmc <- ScaleData(pbmc, vars.to.regress = "percent.mt")
# pbmc <- ScaleData(pbmc, vars.to.regress = "Plate")
## podemos corregir por todos los genes si queremos hacer heatmaps y cosas
## graficas pero en principio escalamos solo a los 2000 genes mas variables.
## también puedo usar "Plate" como vars.to.regress si uso varias placas.
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
ElbowPlot(pbmc)
pbmc <- RunUMAP(pbmc, dims = 1:10)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colors = getPalette(9)
DimPlot(pbmc, reduction = "umap") + scale_color_manual(values=colors)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.8)
head(Idents(pbmc), 5)
DimPlot(pbmc, reduction = "umap") + scale_color_manual(values=colors)
rlang::last_error()
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colors = getPalette(9)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.8)
head(Idents(pbmc), 5)
DimPlot(pbmc, reduction = "umap") + scale_color_manual(values=colors)
DimPlot(pbmc, reduction = "umap") #+ scale_color_manual(values=colors)
library(Seurat)
library(ggplot2)
library(ggExtra)
library(dplyr)
library(data.table)
library(grid)
library(RColorBrewer)
library(monocle)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "/home/guille/Desktop/Omics/scRNA_seq/Day2/data/filtered_gene_bc_matrices/hg19")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# otra opcion para esto es hacer un grepl():
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc)
head(pbmc@assays$RNA@counts) # no me he enterado de esto luego lo ha vuelto a borrar
# este valor puede cambiar, elisabetta lo puso como el numero de cells filtradas
# primero sacamos las variable features y luego las escalamos, al contrario que
# en la teoría por ganar tiempo y espacio.
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
pbmc <- ScaleData(pbmc)
# pbmc <- ScaleData(pbmc, features = rownames(pbmc))
# pbmc <- ScaleData(pbmc, vars.to.regress = "percent.mt")
# pbmc <- ScaleData(pbmc, vars.to.regress = "Plate")
## podemos corregir por todos los genes si queremos hacer heatmaps y cosas
## graficas pero en principio escalamos solo a los 2000 genes mas variables.
## también puedo usar "Plate" como vars.to.regress si uso varias placas.
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# te saca 40 por defecto, pero se puede cambiar
ElbowPlot(pbmc)
# el codo en este caso unas 8PC. Es mejor quedarse un poco de largo, cogemos 10
# si añades muchas despues del codo, no cambia apenas
pbmc <- RunUMAP(pbmc, dims = 1:10)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colors = getPalette(9)
DimPlot(pbmc, reduction = "umap") + scale_color_manual(values=colors)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colors = getPalette(9)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.8)
head(Idents(pbmc), 5)
DimPlot(pbmc, reduction = "umap") #+ scale_color_manual(values=colors)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
DimPlot(pbmc, reduction = "umap") + scale_color_manual(values=colors)
install.packages(clustree)
install.packages("clustree")
#
clustree(pmbc@meta.data, prefix = "RNA_snn_res.")
library(clustree)
clustree(pmbc@meta.data, prefix = "RNA_snn_res.")
clustree(pbmc@meta.data, prefix = "RNA_snn_res.")
# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)
clustree_overlay(pmbc@meta-data, prefix = "RNA_snn_res.",
x_value="UMAP1", y_value="UMAP2", use_colour="points", kavel_nodes=F)
clustree_overlay(pbmc@meta-data, prefix = "RNA_snn_res.",
x_value="UMAP1", y_value="UMAP2", use_colour="points", kavel_nodes=F)
clustree_overlay(pbmc@meta.data, prefix = "RNA_snn_res.",
x_value="UMAP1", y_value="UMAP2", use_colour="points", kavel_nodes=F)
clustree_overlay(pbmc@meta.data, prefix = "RNA_snn_res.", x_value="UMAP1", y_value="UMAP2", use_colour="points", lavel_nodes=F)
clustree(pbmc@meta.data, prefix = "RNA_snn_res.")
# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)
# find markers for every cluster compared to all remaining cells, report only the positive ones
library(dyplr)
# find markers for every cluster compared to all remaining cells, report only the positive ones
library(dplyr)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)
# find markers for every cluster compared to all remaining cells, report only the positive ones
library(dplyr)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)
## se puede indicar al findallmarkers que compare poblaciones especificas
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)
pbmc.markers
pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC)
VlnPlot(pbmc, features = c("MS4A1", "CD3E"))
FeaturePlot(pbmc, features =  c("MS4A1", "CD3E"))
DotPlot(pbmc, features =  c("MS4A1", "CD3E"))
top5 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_logFC)
top5 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC)
DoHeatmap(pbmc, features = top5$gene) + NoLegend()
new.cluster.ids <- c("0 Naive CD4 T" , "1 Memory CD4 T", "2 CD14+ Mono", "3 B", "4 CD8 T", "5 FCGR3A+ Mono",
"6 NK", "7 DC", "8 Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
pbmc$cell_type <- Idents(pbmc)
names(colors) <- levels(Idents(pbmc))
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + scale_color_manual(values=colors) + NoLegend()
#Subset the T cells
Tcells <- subset(pbmc,idents=c(0, 2, 4, 6)) # los T cells que expresaban CD3
pbmc <- FindClusters(pbmc, resolution = 0.5)
Tcells <- subset(pbmc,idents=c(0, 2, 4, 6)) # los T cells que expresaban CD3
#Recompute the Highly Variable genes
Tcells <- FindVariableFeatures(Tcells, selection.method = "vst", nfeatures = 2000)
hvg <- VariableFeatures(Tcells)
length(hvg)
#paso a matriz y me quedo los counts, sacandolo del objeto de seurat
expression.data <- as.matrix(Tcells@assays$RNA@counts[rownames(Tcells@assays$RNA@data),])
pd <- Tcells@meta.data
pd
pheno.data.df <- pd
pd <- new('AnnotatedDataFrame', data = pheno.data.df)
fd <- data.frame(gene_short_name=rownames(Tcells))
rownames(fd) <- rownames(Tcells)
fd <- new('AnnotatedDataFrame', data = fd)
# Make a new CellDataSet using the RNA counts
data <- newCellDataSet(expression.data, featureData = fd,phenoData = pd,expressionFamily = negbinomial())
# Size factors help us normalize for differences in mRNA recovered across cells, and "dispersion" values will help us perform differential expression analysis later
data=estimateSizeFactors(data)
data=estimateDispersions(data)
ordering.genes <- hvg ## genes related to time points
# Select genes used for ordering
data <- setOrderingFilter(data, ordering.genes) # Set list of genes for ordering
data <- reduceDimension(data,reduction_method ="DDRTree",max_components = 2) # Reduce dimensionality. This command takes some minutes
data <- orderCells(data,reverse = F)
plot_cell_trajectory(data, color_by = "cell_type",show_branch_points = F,cell_size = 2.5) + scale_color_manual(values=colors) + theme(axis.line.x = element_line(color="black", size = 1),axis.line.y = element_line(color="black", size = 0.6), axis.text= text,axis.title = element_text(color = "black", size = 12)) + scale_size(range = 2.5)
plot_cell_trajectory(data, color_by = "cell_type",show_branch_points = F,cell_size = 2.5)
plot_cell_trajectory(data, color_by = "Pseudotime",show_branch_points
plot_cell_trajectory(data, color_by = "Pseudotime",show_branch_points = F,cell_size = 2.5)
plot_cell_trajectory(data, color_by = "Pseudotime",show_branch_points = F,cell_size = 2.5)
plot_cell_trajectory(data, color_by = "cell_type",show_branch_points = F,cell_size = 2.5)
#Genes changing between Memory and Naive T
markers <- c("CD44","CCR7","SELL","IL7R","IL2RB","CD28","CD27","SPN","FAS","S100A4")
plot_genes_in_pseudotime(data[markers,],color_by="cell_type")+scale_color_manual(values = colors)
diff_test_res <- differentialGeneTest(data[markers,],fullModelFormulaStr = "~sm.ns(Pseudotime)")
sig_gene_names <- row.names(subset(diff_test_res, qval < 0.1))
plot_pseudotime_heatmap(data[sig_gene_names,],
num_clusters = 3,
cores = 1,
show_rownames = T)
BiocManager::install("SeuratDisk")
library(Seurat)
library(ggplot2)
library(ggExtra)
library(dplyr)
library(data.table)
library(grid)
library(RColorBrewer)
library(monocle)
library(clustree)
library(dplyr)
library(SeuratDisk)
BiocManager::install("SeuratDisk")
install.packages("SeuratDisk")
epi <- load("Desktop/UCL/asthma_tsveti/Biopsy_asthma_epithelial_V3.RDS")
load("Desktop/UCL/asthma_tsveti/Biopsy_asthma_epithelial_V3.RDS")
load("Desktop/UCL/asthma_tsveti/Biopsy_asthma_other_V3.RDS")
epi <- readRDS("Desktop/UCL/asthma_tsveti/Biopsy_asthma_epithelial_V3.RDS")
other <- readRDS("Desktop/UCL/asthma_tsveti/Biopsy_asthma_other_V3.RDS")
epi@meta.data
View(epi@meta.data)
View(epi@assays)
epi@assays$RNA@meta.features
View(epi@assays$RNA@meta.features)
epi@graphs
VlnPlot(epi, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(epi, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mito")
plot1 <- FeatureScatter(epi, feature1 = "nCount_RNA", feature2 = "percent.mito")
plot1
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot2 <- FeatureScatter(epi, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot2
plot1 + plot2
ScaleData
#epi <- subset(epi, subset = nFeature_RNA > X & nFeature_RNA < X & percent.mito < X)
#epi <- NormalizeData(epi)
#epi <- FindVariableFeatures(epi, selection.method = "vst", nfeatures = X)
#epi <- ScaleData(epi)
#epi <- RunPCA(epi, features = VariableFeatures(object = epi))
ElbowPlot(epì)
#epi <- subset(epi, subset = nFeature_RNA > X & nFeature_RNA < X & percent.mito < X)
#epi <- NormalizeData(epi)
#epi <- FindVariableFeatures(epi, selection.method = "vst", nfeatures = X)
#epi <- ScaleData(epi)
#epi <- RunPCA(epi, features = VariableFeatures(object = epi))
ElbowPlot(object = epì, reduction = "pca")
epi <- readRDS("Desktop/UCL/asthma_tsveti/Biopsy_asthma_epithelial_V3.RDS")
#epi <- subset(epi, subset = nFeature_RNA > X & nFeature_RNA < X & percent.mito < X)
#epi <- NormalizeData(epi)
#epi <- FindVariableFeatures(epi, selection.method = "vst", nfeatures = X)
#epi <- ScaleData(epi)
#epi <- RunPCA(epi, features = VariableFeatures(object = epi))
ElbowPlot(object = epì, reduction = "pca")
epi <- RunPCA(epi, features = var.features(object = epi))
epi <- RunPCA(epi, features = epi@assays$RNA@var.features))
epi <- RunPCA(epi, features = epi@assays$RNA@var.features)
ElbowPlot(object = epì, reduction = "pca")
ElbowPlot(object = epì, reduction = pca)
epi <- readRDS("Desktop/UCL/asthma_tsveti/Biopsy_asthma_epithelial_V3.RDS")
other <- readRDS("Desktop/UCL/asthma_tsveti/Biopsy_asthma_other_V3.RDS")
View(epi@assays)
ElbowPlot(object = epi, reduction = "pca")
DimPlot(epi, reduction = "umap")
DimPlot(epi, reduction = "pca")
epi <- RunUMAP(pbmc, dims = 1:10)
epi <- RunUMAP(epi, dims = 1:10)
DimPlot(epi, reduction = "pca")
DimPlot(epi, reduction = "umap")
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colors = getPalette(9)
DimPlot(epi, reduction = "umap") + scale_color_manual(values=colors)
getPalette = colorRampPalette(brewer.pal(10, "Set1"))
getPalette = colorRampPalette(brewer.pal(10, "Set3"))
colors = getPalette(10)
DimPlot(epi, reduction = "umap") + scale_color_manual(values=colors)
DimPlot(epi, reduction = "tsne") + scale_color_manual(values=colors)
DimPlot(epi, reduction = "tsne", label=TRUE) + scale_color_manual(values=colors)
epi <- readRDS("Desktop/UCL/asthma_tsveti/Biopsy_asthma_epithelial_V3.RDS")
DimPlot(epi, reduction = "tsne", label=TRUE) #+ scale_color_manual(values=colors)
getPalette = colorRampPalette(brewer.pal(10, "Set3"))
colors = getPalette(10)
DimPlot(epi, reduction = "tsne", label=TRUE) + scale_color_manual(values=colors)
DimPlot(epi, reduction = "umap") + scale_color_manual(values=colors)
DimPlot(epi, reduction = "tsne", label=TRUE) + scale_color_manual(values=colors)
FeaturePlot(epi,
features = c("SEMA3E"),
cols = c("grey", "red"),
reduction = "umap",
pt.size = 0.75,
order = T)
epi <- RunUMAP(epi, dims = 1:10)
FeaturePlot(epi,
features = c("SEMA3E"),
cols = c("grey", "red"),
reduction = "umap",
pt.size = 0.75,
order = T)
sema <- FeaturePlot(epi,
features = c("SEMA3E"),
cols = c("grey", "red"),
reduction = "umap",
pt.size = 0.75,
order = T)
sema <- FeaturePlot(epi,
features = c("SEMA3E"),
cols = c("grey", "red"),
reduction = "tsne",
pt.size = 0.75,
order = T)
tsne_plot <- DimPlot(epi, reduction = "tsne", label=TRUE) + scale_color_manual(values=colors)
tsne_plot + sema
sema <- FeaturePlot(epi,
features = c("SEMA3E", "PLXND1"),
cols = c("grey", "red"),
reduction = "tsne",
pt.size = 0.75,
order = T)
tsne_plot + sema
plxd1_epi <- FeaturePlot(epi,
features = c("PLXND1"),
cols = c("grey", "red"),
reduction = "tsne",
pt.size = 0.75,
order = T)
sema_epi <- FeaturePlot(epi,
features = c("SEMA3E"),
cols = c("grey", "red"),
reduction = "tsne",
pt.size = 0.75,
order = T)
plxnd1_epi <- FeaturePlot(epi,
features = c("PLXND1"),
cols = c("grey", "red"),
reduction = "tsne",
pt.size = 0.75,
order = T)
tsne_plot + sema_epi + plxnd1_epi
FeaturePlot(epi, features =  c("SEMA3E", "PLXND1"))
DotPlot(epi, features =  c("SEMA3E", "PLXND1"))
RidgePlot(epi, features = c("SEMA3E", "PLXND1"))
DotPlot(epi, features =  c("SEMA3E", "PLXND1"))
VlnPlot(epi, features = c("SEMA3E", "PLXND1"))
DoHeatmap(epi, features = c("SEMA3E", "PLXND1"))
FeaturePlot(epi, features = c("SEMA3E", "PLXND1"), blend = TRUE)
FeatureScatter(epi, feature1 = "SEMA3E", feature2 = "PLXND1")
tsne_plot <- DimPlot(epi, reduction = "tsne", label=TRUE) + scale_color_manual(values=colors)
tsne_plot
library("affy")
library("limma")
library("genefilter")
#2. Import targets.txt file. generates a data frame:
targets <- readTargets("targets.txt", row.names="FileName")
### Establecer directorio de trabajo
setwd("/home/guille/Desktop/Omics/microarrays/Trabajo_final/")
##1. Load libraries (do not forget to install them before)
library("affy")
library("limma")
library("genefilter")
#2. Import targets.txt file. generates a data frame:
targets <- readTargets("targets.txt", row.names="FileName")
View(targets)
#2. Import targets.txt file. generates a data frame:
targets <- readTargets("targets.txt", row.names="FileName")
treat <- factor(targets$Treatment, levels=c("DMSO", "SAHM1"))
cell_types <- factor(targets$CellType)
cell_types
treat
design <- model.matrix(~cell_types+treat)
View(design)
#3. Import .CEL files
data <- ReadAffy(filenames=targets$FileName) 		#Import intensities from Affymetrix arrays (.CEL)
View(data)
data@assayData$exprs
#4. Normalize with RMA
#generates object eset (class ExprSet),
#expresso function provides intensities in log scale
# hazme correccion de bg por rma, normalizas por quantiles, pmonly
# todo esto lo guardas en eset, que es un exprSet, no tiene phenodata en este caso, es matriz de intensidades
eset <- expresso(data,
bg.correct = TRUE,
bgcorrect.method="rma",
normalize = TRUE,
normalize.method="quantiles",
pmcorrect.method="pmonly",
summary.method="medianpolish",
verbose = TRUE,
)
#boxplot for raw data
boxplot(data,
main="Boxplot Before Normalization",
col = "lightgrey")
#boxplot for normalized data
exprseset <- as.data.frame(exprs(eset))
boxplot(data.frame(exprseset),
main="Boxplot After Normalization (log scale)",
col = "white")
#6.Data filtering using IQR. Filtrado sobre exprset completo de 40000 sondas
# cortas por el IQR, los limites del box del boxplot. los genes que varian poco,
# tienen poca variacion (esto se hace por cada gen) y todos los genes que tengan
# IQR < 0.5 eso fuera son genes que no varian de casos a controles.
esetIQR <- varFilter(eset, var.func=IQR, var.cutoff=0.5, filterByQuantile=TRUE)
rownames(design)<-targets$FileName
View(design)
#9. Obtaining differentially expressed genes (DEGs)
#Linear model and eBayes
fit<-lmFit(esetIQR, design)  ##getting DEGs from IQR
#fit2<-contrasts.fit(fit, cont.matrix)
fit2<-eBayes(fit2)
#fit2<-contrasts.fit(fit, cont.matrix)
fit2<-eBayes(fit)
View(fit2)
fit2[["design"]]
#Table with DEGs results. El tamaño de top table va a ser el tamaño de filas
# dim(expr(esetIQR)), 22550 filas y 10 columnas. si no pones eso el limite es 50 filas
toptableIQR<-topTable(fit2, coef="treatSAHM1", number=dim(exprs(esetIQR))[1], adjust.method="BH")
View(toptableIQR)
#Table with DEGs results. El tamaño de top table va a ser el tamaño de filas
# dim(expr(esetIQR)), 22550 filas y 10 columnas. si no pones eso el limite es 50 filas
toptableIQR<-topTable(fit2, coef="treatSAHM1", number=dim(exprs(esetIQR))[1], adjust.method="BH", , sort.by="p")
View(toptableIQR)
#Table with DEGs results. El tamaño de top table va a ser el tamaño de filas
# dim(expr(esetIQR)), 22550 filas y 10 columnas. si no pones eso el limite es 50 filas
toptableIQR<-topTable(fit2, coef="treatSAHM1", number=dim(exprs(esetIQR))[1], adjust.method="BH", sort.by="p")
View(toptableIQR)
View(toptableIQR)
##10. Save results
save(toptableIQR,file="MyResults.RData")
nrow(toptableIQR[toptableIQR$adj.P.Val<0.05, ])
library(Biobase)
library(GEOquery)
library(annotate)
library(hgu133plus2.db)
# Sacamos los IDs de affymetrix
affy_IDs <- as.character(row.names(toptableIQR))
# Convertimos de ID affymetrix a GENE SYMBOL
GENE_SYMBOLS <- select(hgu133plus2.db, keys=affy_IDs, columns="SYMBOL", keytype="PROBEID")
# Eliminamos duplicados generados en la conversion
GENE_SYMBOLS2 = GENE_SYMBOLS[!duplicated(GENE_SYMBOLS["PROBEID"]),]
# Añadimos las conversiones al dataframe
toptableIQR$SYMBOL <- GENE_SYMBOLS2$SYMBOL
View(toptableIQR)
toptableIQR$rank <- c(1:nrow(toptableIQR))
# Reordenamos las columnas
toptableIQR<-toptableIQR[, c(8,7,1,2,3,4,5,6)]
View(GENE_SYMBOLS)
BiocManager::install("ArrayTools")
#Utilizamos la función output.gct() del paquete ArrayTools para generar el .gct
library(ArrayTools)
dir.create("./GSEA_files/")
dir.create("./GSEA_files/", showWarnings = FALSE)
#Crea el directorio 'GSEA_files' en caso de que no exista
dir.create("./GSEA_files/", showWarnings = FALSE)
setwd("./GSEA_files/")
library(ArrayTools)
output.gct(eset, filename = "GSE18198_normalised.gct")
output.gct(eset, filename = "GSE18198_normalised")
gsea_gct<-read.table("GSE18198_normalised.gct")
gsea_gct<-read.table("GSE18198_normalised.gct", skip = 2)
View(gsea_gct)
gsea_gct<-read.table("GSE18198_normalised.gct", header = TRUE, skip = 2)
View(gsea_gct)
library(readr)
test<-fread("/home/guille/Desktop/Omics/microarrays/Trabajo_final/GSM455115.CEL")
library(data.table)
test<-fread("/home/guille/Desktop/Omics/microarrays/Trabajo_final/GSM455115.CEL")
View(test)
rm(test)
